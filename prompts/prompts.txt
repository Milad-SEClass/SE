هوش مصنوعی استفاده شده : DEEPSEEK

پرامپت داده شده : 

سناریو پروژه پایانترم درس 
طراحی و پیاده سازی سیستم مدیریت کتابخانه دانشگاه
در کتابخانه دانشگاه اطلاعات کتاب ها توسط یکی از 3 کارمند کتابخانه در سیستم ثبت می شود. دانشجویان با مراجعه به این سیستم پس از جستجو و پیدا کردن  کتاب مورد نظر خود می توانند کتاب را به امانت ببرند. مدیر کتابخانه می تواند گزارش های مختلفی از اطلاعات امانات بر اساس دانشجو، کتاب و کارمند داشته باشد.
در ادامه نیازمندی های سیستم به تفکیک کاربران سیستم دقیق تر مشخص شده است.
1- دانشجو:
1-1 ثبت نام در سیستم و مشخص کردن نام کاربری و کلمه ورود
1-2 ورود به سیستم
1-3 جستجوی کتاب بر اساس ترکیبی از مقادیر عنوان کتاب و یا سال نشر و یا نام نویسنده و مشاهده اطلاعات کتاب و وضعیت امانت کتاب (موجود هست یا خیر)
1-4 ثبت درخواست امانت کتاب بر اساس بازه زمانی شامل زمان شروع و زمان پایان
2- کاربر مهمان:
2-1 مشاهده تعداد دانشجویان ثبت نام کرده 
2-2 جستجو فقط بر اساس نام کتاب و مشاهده نتایج جستجو صرفا شامل اطلاعات کتاب
2-3 مشاهده اطلاعات آماری ساده شامل تعداد کل دانشجویان، تعداد کل کتاب ها، تعداد کل امانت ها، تعداد آخرین کتاب هایی که در امانت هستند
3- کارمند کتابخانه:
3-1 ورود به سیستم (ثبت نام کارمند توسط مدیر کتابخانه انجام می شود)
3-2 امکان تغییر رمز عبور
3-3 ثبت اطلاعات کتاب
3-4 جستجو و ویرایش اطلاعات کتاب
3-5 بررسی و تایید درخواست امانت کتاب که تاریخ شروع آنها برای همان روز یا روز قبل هست (بعد از تایید درخواست دانشجو میتواند با مراجعه به کتابخانه کتاب مورد درخواست خود را امانت ببرد) 
3-6 مشاهده گزارش تاریخچه امانات یک دانشجو به همراه اطلاعات آمارای شامل تعداد کل امانات، تعداد کل کتاب های تحویل داده نشد، تعداد کل امانت هایی که توسط دانشجو با تاخیر تحویل داده شده اند.
3-7 فعال و غیر فعال کردن دانشجو (دانشجوی غیر فعال امکان به امانت بردن کتاب را ندارد و دانشجویان به صورت پیشفرض با ثبت نام در سیستم به صورت فعال هستند)
3-8 دریافت کتاب به امانت برده شده و ثبت زمان دریافت کتاب
4- مدیر سیستم:
4-1 تعریف کارمند کتابخانه شامل نام کاربری و رمز عبور
4-2 مشاهده عملکرد کارمند شامل تعداد اطلاعات کتاب هایی که ثبت کرده، تعداد کل کتاب هایی که به امانت داده، تعداد کل کتاب هایی که تحویل گرفته
4-3 مشاهده اطلاعات آماری امانات کتاب شامل تعداد درخواست های امانت ثبت شده، تعداد کل امانت داده شده، میانگین تعداد روزهایی که کتاب به امانت برده شده (میانگین زمان دریافت و برگرداندن کتاب)
4-4 مشاهده اطلاعات آماری دانشجویان همه موارد 3-6 به همراه لیست 10 دانشجوی بابیشترین تاخیر در تحویل کتاب          کد این رو به زبان جاوا و به صورت کلاس به کلاس و جدا بزن میخوام تو اینتلیج بزارم و کامیت پوش کنم رو گیت هاب


جواب : 


        if (userManager.registerStudent(username, password)) {
            System.out.println("ثبت‌نام با موفقیت انجام شد.");
        } else {
            System.out.println("خطا در ثبت‌نام. نام کاربری ممکن است تکراری باشد.");
        }
    }

    private static void login() {
        System.out.print("نام کاربری: ");
        String username = scanner.nextLine();
        System.out.print("رمز عبور: ");
        String password = scanner.nextLine();

        currentUser = userManager.login(username, password);
        if (currentUser != null) {
            System.out.println("خوش آمدید " + currentUser.getUsername() + "!");
        } else {
            System.out.println("نام کاربری یا رمز عبور اشتباه است.");
        }
    }

    private static void searchBooksGuest() {
        System.out.print("عنوان کتاب: ");
        String title = scanner.nextLine();

        List<Book> results = bookManager.searchBooks(title, "", "", 0);
        if (results.isEmpty()) {
            System.out.println("کتابی یافت نشد.");
        } else {
            System.out.println("نتایج جستجو:");
            for (Book book : results) {
                System.out.println(book.getBasicInfo());
            }
        }
    }

    private static void showStatistics() {
        System.out.println("\n=== آمار کلی کتابخانه ===");
        System.out.println("تعداد دانشجویان: " + userManager.getStudentCount());
        System.out.println("تعداد کل کتاب‌ها: " + bookManager.getTotalBooks());
        System.out.println("تعداد کل امانت‌ها: " + borrowManager.getTotalBorrows());
        System.out.println("کتاب‌های در حال امانت: " + borrowManager.getActiveBorrowsCount());
    }

    private static void showStudentMenu() {
        System.out.println("\n=== پنل دانشجو ===");
        System.out.println("1. جستجوی کتاب");
        System.out.println("2. درخواست امانت کتاب");
        System.out.println("3. مشاهده تاریخچه امانت‌ها");
        System.out.println("4. خروج از سیستم");
        System.out.print("انتخاب کنید: ");

        int choice = scanner.nextInt();
        scanner.nextLine();

        switch (choice) {
            case 1:
                searchBooksStudent();
                break;
            case 2:
                requestBorrow();
                break;
            case 3:
                viewBorrowHistory();
                break;
            case 4:
                currentUser = null;
                break;
            default:
                System.out.println("انتخاب نامعتبر!");
        }
    }

    private static void searchBooksStudent() {
        System.out.print("عنوان کتاب: ");
        String title = scanner.nextLine();
        System.out.print("نام نویسنده: ");
        String author = scanner.nextLine();
        System.out.print("سال نشر: ");
        int year = scanner.nextInt();
        scanner.nextLine();

        List<Book> results = bookManager.searchBooks(title, author, "", year);
        for (Book book : results) {
            System.out.println(book.getFullInfo() + " - وضعیت: " + 
                (book.isAvailable() ? "موجود" : "امانت داده شده"));
        }
    }

    private static void requestBorrow() {
        System.out.print("شناسه کتاب: ");
        String bookId = scanner.nextLine();
        System.out.print("تاریخ شروع (YYYY-MM-DD): ");
        String startDateStr = scanner.nextLine();
        System.out.print("تاریخ پایان (YYYY-MM-DD): ");
        String endDateStr = scanner.nextLine();

        LocalDate startDate = LocalDate.parse(startDateStr);
        LocalDate endDate = LocalDate.parse(endDateStr);

        if (borrowManager.requestBorrow(currentUser.getUsername(), bookId, startDate, endDate)) {
            System.out.println("درخواست امانت با موفقیت ثبت شد.");
        } else {
            System.out.println("خطا در ثبت درخواست امانت.");
        }
    }

    private static void viewBorrowHistory() {
        List<BorrowRecord> history = borrowManager.getUserBorrowHistory(currentUser.getUsername());
        for (BorrowRecord record : history) {
            System.out.println(record.getInfo());
        }
    }

    private static void showEmployeeMenu() {
        System.out.println("\n=== پنل کارمند ===");
        System.out.println("1. تغییر رمز عبور");
        System.out.println("2. ثبت کتاب جدید");
        System.out.println("3. جستجو و ویرایش کتاب");
        System.out.println("4. بررسی درخواست‌های امانت");
        System.out.println("5. مشاهده تاریخچه امانت دانشجو");
        System.out.println("6. مدیریت وضعیت دانشجو");
        System.out.println("7. ثبت دریافت کتاب");
        System.out.println("8. خروج از سیستم");
        System.out.print("انتخاب کنید: ");

        int choice = scanner.nextInt();
        scanner.nextLine();

        switch (choice) {
            case 1:
                changePassword();
                break;
            case 2:
                addNewBook();
                break;
            case 3:
                searchAndEditBook();
                break;
            case 4:
                reviewBorrowRequests();
                break;
            case 5:
                viewStudentBorrowHistory();
                break;
            case 6:
                manageStudentStatus();
                break;
            case 7:
                registerBookReturn();
                break;
            case 8:
                currentUser = null;
                break;
            default:
                System.out.println("انتخاب نامعتبر!");
        }
    }

    private static void changePassword() {
        System.out.print("رمز عبور جدید: ");
        String newPassword = scanner.nextLine();
        userManager.changePassword(currentUser.getUsername(), newPassword);
        System.out.println("رمز عبور با موفقیت تغییر یافت.");
    }

    private static void addNewBook() {
        System.out.print("شناسه کتاب: ");
        String id = scanner.nextLine();
        System.out.print("عنوان: ");
        String title = scanner.nextLine();
        System.out.print("نویسنده: ");
        String author = scanner.nextLine();
        System.out.print("ناشر: ");
        String publisher = scanner.nextLine();
        System.out.print("سال نشر: ");
        int year = scanner.nextInt();
        scanner.nextLine();
        System.out.print("شابک: ");
        String isbn = scanner.nextLine();

        Book book = new Book(id, title, author, publisher, year, isbn);
        if (bookManager.addBook(book)) {
            System.out.println("کتاب با موفقیت ثبت شد.");
        } else {
            System.out.println("خطا در ثبت کتاب.");
        }
    }

    private static void showManagerMenu() {
        System.out.println("\n=== پنل مدیر ===");
        System.out.println("1. تعریف کارمند جدید");
        System.out.println("2. مشاهده عملکرد کارمندان");
        System.out.println("3. مشاهده آمار امانت‌ها");
        System.out.println("4. مشاهده آمار دانشجویان");
        System.out.println("5. خروج از سیستم");
        System.out.print("انتخاب کنید: ");

        int choice = scanner.nextInt();
        scanner.nextLine();

        switch (choice) {
            case 1:
                registerEmployee();
                break;
            case 2:
                viewEmployeePerformance();
                break;
            case 3:
                viewBorrowStatistics();
                break;
            case 4:
                viewStudentStatistics();
                break;
            case 5:
                currentUser = null;
                break;
            default:
                System.out.println("انتخاب نامعتبر!");
        }
    }

    private static void registerEmployee() {
        System.out.print("نام کاربری: ");
        String username = scanner.nextLine();
        System.out.print("رمز عبور: ");
        String password = scanner.nextLine();

        if (userManager.registerEmployee(username, password, UserRole.EMPLOYEE)) {
            System.out.println("کارمند با موفقیت ثبت شد.");
        } else {
            System.out.println("خطا در ثبت کارمند.");
        }
    }

    // سایر متدهای مربوط به منوها...
}

2. Enum نقش‌های کاربری (UserRole)
java

public enum UserRole {
    STUDENT,
    EMPLOYEE,
    MANAGER,
    GUEST
}

3. کلاس کاربر (User)
java

public class User {
    private String username;
    private String password;
    private UserRole role;
    private boolean active;

    public User(String username, String password, UserRole role) {
        this.username = username;
        this.password = password;
        this.role = role;
        this.active = true;
    }

    // Getter and Setter methods
    public String getUsername() { return username; }
    public void setUsername(String username) { this.username = username; }

    public String getPassword() { return password; }
    public void setPassword(String password) { this.password = password; }

    public UserRole getRole() { return role; }
    public void setRole(UserRole role) { this.role = role; }

    public boolean isActive() { return active; }
    public void setActive(boolean active) { this.active = active; }

    public boolean checkPassword(String password) {
        return this.password.equals(password);
    }
}

4. کلاس کتاب (Book)
java

public class Book {
    private String id;
    private String title;
    private String author;
    private String publisher;
    private int publicationYear;
    private String isbn;
    private boolean available;

    public Book(String id, String title, String author, String publisher, int publicationYear, String isbn) {
        this.id = id;
        this.title = title;
        this.author = author;
        this.publisher = publisher;
        this.publicationYear = publicationYear;
        this.isbn = isbn;
        this.available = true;
    }

    // Getter and Setter methods
    public String getId() { return id; }
    public void setId(String id) { this.id = id; }

    public String getTitle() { return title; }
    public void setTitle(String title) { this.title = title; }

    public String getAuthor() { return author; }
    public void setAuthor(String author) { this.author = author; }

    public String getPublisher() { return publisher; }
    public void setPublisher(String publisher) { this.publisher = publisher; }

    public int getPublicationYear() { return publicationYear; }
    public void setPublicationYear(int publicationYear) { this.publicationYear = publicationYear; }

    public String getIsbn() { return isbn; }
    public void setIsbn(String isbn) { this.isbn = isbn; }

    public boolean isAvailable() { return available; }
    public void setAvailable(boolean available) { this.available = available; }

    public String getBasicInfo() {
        return String.format("ID: %s, Title: %s, Author: %s", id, title, author);
    }

    public String getFullInfo() {
        return String.format("ID: %s, Title: %s, Author: %s, Publisher: %s, Year: %d, ISBN: %s", 
                           id, title, author, publisher, publicationYear, isbn);
    }
}

5. کلاس سابقه امانت (BorrowRecord)
java

import java.time.LocalDate;

public class BorrowRecord {
    private String id;
    private String studentUsername;
    private String bookId;
    private LocalDate requestDate;
    private LocalDate startDate;
    private LocalDate endDate;
    private LocalDate actualReturnDate;
    private String employeeUsername;
    private BorrowStatus status;

    public BorrowRecord(String id, String studentUsername, String bookId, LocalDate startDate, LocalDate endDate) {
        this.id = id;
        this.studentUsername = studentUsername;
        this.bookId = bookId;
        this.requestDate = LocalDate.now();
        this.startDate = startDate;
        this.endDate = endDate;
        this.status = BorrowStatus.REQUESTED;
    }

    // Getter and Setter methods
    public String getId() { return id; }
    public void setId(String id) { this.id = id; }

    public String getStudentUsername() { return studentUsername; }
    public void setStudentUsername(String studentUsername) { this.studentUsername = studentUsername; }

    public String getBookId() { return bookId; }
    public void setBookId(String bookId) { this.bookId = bookId; }

    public LocalDate getRequestDate() { return requestDate; }
    public void setRequestDate(LocalDate requestDate) { this.requestDate = requestDate; }

    public LocalDate getStartDate() { return startDate; }
    public void setStartDate(LocalDate startDate) { this.startDate = startDate; }

    public LocalDate getEndDate() { return endDate; }
    public void setEndDate(LocalDate endDate) { this.endDate = endDate; }

    public LocalDate getActualReturnDate() { return actualReturnDate; }
    public void setActualReturnDate(LocalDate actualReturnDate) { this.actualReturnDate = actualReturnDate; }

    public String getEmployeeUsername() { return employeeUsername; }
    public void setEmployeeUsername(String employeeUsername) { this.employeeUsername = employeeUsername; }

    public BorrowStatus getStatus() { return status; }
    public void setStatus(BorrowStatus status) { this.status = status; }

    public String getInfo() {
        return String.format("Borrow ID: %s, Book: %s, Period: %s to %s, Status: %s", 
                           id, bookId, startDate, endDate, status);
    }

    public boolean isOverdue() {
        return LocalDate.now().isAfter(endDate) && status == BorrowStatus.BORROWED;
    }

    public long getDaysOverdue() {
        if (isOverdue()) {
            return ChronoUnit.DAYS.between(endDate, LocalDate.now());
        }
        return 0;
    }
}

6. Enum وضعیت امانت (BorrowStatus)
java

public enum BorrowStatus {
    REQUESTED,
    APPROVED,
    BORROWED,
    RETURNED,
    REJECTED
}

7. مدیریت کاربران (UserManager)
java

import java.util.*;

public class UserManager {
    private Map<String, User> users;
    private Map<String, EmployeePerformance> employeePerformance;

    public UserManager() {
        users = new HashMap<>();
        employeePerformance = new HashMap<>();
    }

    public boolean registerStudent(String username, String password) {
        if (users.containsKey(username)) {
            return false;
        }
        User student = new User(username, password, UserRole.STUDENT);
        users.put(username, student);
        return true;
    }

    public boolean registerEmployee(String username, String password, UserRole role) {
        if (users.containsKey(username)) {
            return false;
        }
        User employee = new User(username, password, role);
        users.put(username, employee);
        employeePerformance.put(username, new EmployeePerformance(username));
        return true;
    }

    public User login(String username, String password) {
        User user = users.get(username);
        if (user != null && user.checkPassword(password) && user.isActive()) {
            return user;
        }
        return null;
    }

    public void changePassword(String username, String newPassword) {
        User user = users.get(username);
        if (user != null) {
            user.setPassword(newPassword);
        }
    }

    public boolean toggleStudentStatus(String username) {
        User student = users.get(username);
        if (student != null && student.getRole() == UserRole.STUDENT) {
            student.setActive(!student.isActive());
            return true;
        }
        return false;
    }

    public int getStudentCount() {
        return (int) users.values().stream()
                .filter(user -> user.getRole() == UserRole.STUDENT)
                .count();
    }

    public List<User> getAllStudents() {
        return users.values().stream()
                .filter(user -> user.getRole() == UserRole.STUDENT)
                .collect(ArrayList::new, ArrayList::add, ArrayList::addAll);
    }

    public void recordBookAdded(String employeeUsername) {
        EmployeePerformance perf = employeePerformance.get(employeeUsername);
        if (perf != null) {
            perf.incrementBooksAdded();
        }
    }

    public void recordBookBorrowed(String employeeUsername) {
        EmployeePerformance perf = employeePerformance.get(employeeUsername);
        if (perf != null) {
            perf.incrementBooksBorrowed();
        }
    }

    public void recordBookReturned(String employeeUsername) {
        EmployeePerformance perf = employeePerformance.get(employeeUsername);
        if (perf != null) {
            perf.incrementBooksReturned();
        }
    }

    public List<EmployeePerformance> getEmployeePerformance() {
        return new ArrayList<>(employeePerformance.values());
    }
}

8. مدیریت کتاب‌ها (BookManager)
java

import java.util.*;
import java.util.stream.Collectors;

public class BookManager {
    private Map<String, Book> books;

    public BookManager() {
        books = new HashMap<>();
    }

    public boolean addBook(Book book) {
        if (books.containsKey(book.getId())) {
            return false;
        }
        books.put(book.getId(), book);
        return true;
    }

    public boolean updateBook(String bookId, Book updatedBook) {
        if (!books.containsKey(bookId)) {
            return false;
        }
        books.put(bookId, updatedBook);
        return true;
    }

    public Book getBook(String bookId) {
        return books.get(bookId);
    }

    public List<Book> searchBooks(String title, String author, String publisher, int year) {
        return books.values().stream()
                .filter(book -> 
                    (title.isEmpty() || book.getTitle().toLowerCase().contains(title.toLowerCase())) &&
                    (author.isEmpty() || book.getAuthor().toLowerCase().contains(author.toLowerCase())) &&
                    (publisher.isEmpty() || book.getPublisher().toLowerCase().contains(publisher.toLowerCase())) &&
                    (year == 0 || book.getPublicationYear() == year)
                )
                .collect(Collectors.toList());
    }

    public List<Book> searchByTitle(String title) {
        return books.values().stream()
                .filter(book -> book.getTitle().toLowerCase().contains(title.toLowerCase()))
                .collect(Collectors.toList());
    }

    public int getTotalBooks() {
        return books.size();
    }

    public boolean isBookAvailable(String bookId) {
        Book book = books.get(bookId);
        return book != null && book.isAvailable();
    }

    public void setBookAvailability(String bookId, boolean available) {
        Book book = books.get(bookId);
        if (book != null) {
            book.setAvailable(available);
        }
    }
}

9. مدیریت امانت‌ها (BorrowManager)
java

import java.util.*;
import java.time.LocalDate;
import java.time.temporal.ChronoUnit;

public class BorrowManager {
    private Map<String, BorrowRecord> borrowRecords;
    private int borrowCounter;

    public BorrowManager() {
        borrowRecords = new HashMap<>();
        borrowCounter = 1;
    }

    public boolean requestBorrow(String studentUsername, String bookId, LocalDate startDate, LocalDate endDate) {
        String borrowId = "B" + borrowCounter++;
        BorrowRecord record = new BorrowRecord(borrowId, studentUsername, bookId, startDate, endDate);
        borrowRecords.put(borrowId, record);
        return true;
    }

    public boolean approveBorrow(String borrowId, String employeeUsername) {
        BorrowRecord record = borrowRecords.get(borrowId);
        if (record != null && record.getStatus() == BorrowStatus.REQUESTED) {
            record.setStatus(BorrowStatus.APPROVED);
            record.setEmployeeUsername(employeeUsername);
            return true;
        }
        return false;
    }

    public boolean registerBorrow(String borrowId) {
        BorrowRecord record = borrowRecords.get(borrowId);
        if (record != null && record.getStatus() == BorrowStatus.APPROVED) {
            record.setStatus(BorrowStatus.BORROWED);
            return true;
        }
        return false;
    }

    public boolean returnBook(String borrowId, LocalDate returnDate) {
        BorrowRecord record = borrowRecords.get(borrowId);
        if (record != null && record.getStatus() == BorrowStatus.BORROWED) {
            record.setStatus(BorrowStatus.RETURNED);
            record.setActualReturnDate(returnDate);
            return true;
        }
        return false;
    }

    public List<BorrowRecord> getPendingRequests() {
        return borrowRecords.values().stream()
                .filter(record -> record.getStatus() == BorrowStatus.REQUESTED &&
                                 (record.getStartDate().isEqual(LocalDate.now()) ||
                                  record.getStartDate().isBefore(LocalDate.now())))
                .collect(ArrayList::new, ArrayList::add, ArrayList::addAll);
    }

    public List<BorrowRecord> getUserBorrowHistory(String username) {
        return borrowRecords.values().stream()
                .filter(record -> record.getStudentUsername().equals(username))
                .collect(ArrayList::new, ArrayList::add, ArrayList::addAll);
    }

    public int getTotalBorrows() {
        return borrowRecords.size();
    }

    public int getActiveBorrowsCount() {
        return (int) borrowRecords.values().stream()
                .filter(record -> record.getStatus() == BorrowStatus.BORROWED)
                .count();
    }

    public BorrowStatistics getBorrowStatistics() {
        BorrowStatistics stats = new BorrowStatistics();
        
        List<BorrowRecord> allRecords = new ArrayList<>(borrowRecords.values());
        
        stats.setTotalRequests(allRecords.size());
        stats.setTotalBorrowed((int) allRecords.stream()
                .filter(r -> r.getStatus() == BorrowStatus.BORROWED || r.getStatus() == BorrowStatus.RETURNED)
                .count());
        
        // محاسبه میانگین مدت امانت
        double avgDays = allRecords.stream()
                .filter(r -> r.getStatus() == BorrowStatus.RETURNED && r.getActualReturnDate() != null)
                .mapToLong(r -> ChronoUnit.DAYS.between(r.getStartDate(), r.getActualReturnDate()))
                .average()
                .orElse(0.0);
        stats.setAverageBorrowDays(avgDays);
        
        return stats;
    }

    public StudentBorrowStats getStudentBorrowStats(String username) {
        StudentBorrowStats stats = new StudentBorrowStats(username);
        
        List<BorrowRecord> studentRecords = getUserBorrowHistory(username);
        
        stats.setTotalBorrows(studentRecords.size());
        stats.setNotReturnedCount((int) studentRecords.stream()
                .filter(r -> r.getStatus() == BorrowStatus.BORROWED && r.isOverdue())
                .count());
        stats.setDelayedReturnsCount((int) studentRecords.stream()
                .filter(r -> r.getStatus() == BorrowStatus.RETURNED && 
                           r.getActualReturnDate().isAfter(r.getEndDate()))
                .count());
        
        return stats;
    }

    public List<Map.Entry<String, Long>> getTopStudentsWithDelays() {
        Map<String, Long> studentDelays = new HashMap<>();
        
        for (BorrowRecord record : borrowRecords.values()) {
            if (record.getStatus() == BorrowStatus.RETURNED && 
                record.getActualReturnDate().isAfter(record.getEndDate())) {
                
                long delayDays = ChronoUnit.DAYS.between(record.getEndDate(), record.getActualReturnDate());
                studentDelays.merge(record.getStudentUsername(), delayDays, Long::sum);
            }
        }
        
        return studentDelays.entrySet().stream()
                .sorted((e1, e2) -> Long.compare(e2.getValue(), e1.getValue()))
                .limit(10)
                .collect(ArrayList::new, ArrayList::add, ArrayList::addAll);
    }
}

10. کلاس‌های آمار و عملکرد
java

// آمار امانت
public class BorrowStatistics {
    private int totalRequests;
    private int totalBorrowed;
    private double averageBorrowDays;

    // Getter and Setter methods
    public int getTotalRequests() { return totalRequests; }
    public void setTotalRequests(int totalRequests) { this.totalRequests = totalRequests; }

    public int getTotalBorrowed() { return totalBorrowed; }
    public void setTotalBorrowed(int totalBorrowed) { this.totalBorrowed = totalBorrowed; }

    public double getAverageBorrowDays() { return averageBorrowDays; }
    public void setAverageBorrowDays(double averageBorrowDays) { this.averageBorrowDays = averageBorrowDays; }
}

// آمار دانشجو
public class StudentBorrowStats {
    private String username;
    private int totalBorrows;
    private int notReturnedCount;
    private int delayedReturnsCount;

    public StudentBorrowStats(String username) {
        this.username = username;
    }

    // Getter and Setter methods
    public String getUsername() { return username; }
    public void setUsername(String username) { this.username = username; }

    public int getTotalBorrows() { return totalBorrows; }
    public void setTotalBorrows(int totalBorrows) { this.totalBorrows = totalBorrows; }

    public int getNotReturnedCount() { return notReturnedCount; }
    public void setNotReturnedCount(int notReturnedCount) { this.notReturnedCount = notReturnedCount; }

    public int getDelayedReturnsCount() { return delayedReturnsCount; }
    public void setDelayedReturnsCount(int delayedReturnsCount) { this.delayedReturnsCount = delayedReturnsCount; }
}

// عملکرد کارمند
public class EmployeePerformance {
    private String username;
    private int booksAdded;
    private int booksBorrowed;
    private int booksReturned;

    public EmployeePerformance(String username) {
        this.username = username;
    }

    // Getter and Setter methods
    public String getUsername() { return username; }
    public void setUsername(String username) { this.username = username; }

    public int getBooksAdded() { return booksAdded; }
    public void incrementBooksAdded() { this.booksAdded++; }

    public int getBooksBorrowed() { return booksBorrowed; }
    public void incrementBooksBorrowed() { this.booksBorrowed++; }

    public int getBooksReturned() { return booksReturned; }
    public void incrementBooksReturned() { this.booksReturned++; }
}

راهنمای اجرا و استقرار

    تمام کلاس‌ها را در پکیج مناسب ذخیره کنید

    از Java 8 یا بالاتر استفاده کنید

    کلاس LibraryManagementSystem شامل متد main است و نقطه شروع برنامه می‌باشد

    برای کامیت در گیت‌هاب، یک ریپازیتوری جدید ایجاد کنید و تمام فایل‌های .java را اضافه کنید

این پیاده‌سازی تمام نیازمندی‌های مشخص شده در سناریو را پوشش می‌دهد و به صورت ماژولار طراحی شده است که امکان توسعه و نگهداری آسان را فراهم می‌کند.
Cannot resolve method 'searchAndEditBook' in 'LibraryManagementSystem' تو کلاس لایبرری منیجمنت سیستم این ارور رو میگه چیکار کنم

در کلاس LibraryManagementSystem متد searchAndEditBook تعریف نشده است. این متد و سایر متدهای مربوط به منوها باید پیاده‌سازی شوند. در ادامه کد کامل و اصلاح شده را ارائه می‌دهم:
کد کامل و اصلاح شده LibraryManagementSystem
java

import java.util.*;
import java.time.LocalDate;

public class LibraryManagementSystem {
    private static Scanner scanner = new Scanner(System.in);
    private static UserManager userManager = new UserManager();
    private static BookManager bookManager = new BookManager();
    private static BorrowManager borrowManager = new BorrowManager();
    private static User currentUser = null;

    public static void main(String[] args) {
        initializeSampleData();
        
        while (true) {
            if (currentUser == null) {
                showGuestMenu();
            } else {
                switch (currentUser.getRole()) {
                    case STUDENT:
                        showStudentMenu();
                        break;
                    case EMPLOYEE:
                        showEmployeeMenu();
                        break;
                    case MANAGER:
                        showManagerMenu();
                        break;
                }
            }
        }
    }

    private static void initializeSampleData() {
        // ایجاد مدیر سیستم
        userManager.registerEmployee("admin", "admin123", UserRole.MANAGER);
        
        // ایجاد کارمند نمونه
        userManager.registerEmployee("emp1", "emp123", UserRole.EMPLOYEE);
        
        // ایجاد کتاب‌های نمونه
        Book book1 = new Book("1", "Java Programming", "John Doe", "Tech Publications", 2020, "1234567890");
        Book book2 = new Book("2", "Data Structures", "Jane Smith", "CS Books", 2019, "0987654321");
        bookManager.addBook(book1);
        bookManager.addBook(book2);
        
        // ایجاد دانشجوی نمونه
        userManager.registerStudent("student1", "stu123");
    }

    private static void showGuestMenu() {
        System.out.println("\n=== سیستم مدیریت کتابخانه دانشگاه ===");
        System.out.println("1. ثبت‌نام دانشجو");
        System.out.println("2. ورود به سیستم");
        System.out.println("3. جستجوی کتاب");
        System.out.println("4. مشاهده آمار کلی");
        System.out.println("5. خروج");
        System.out.print("انتخاب کنید: ");

        int choice = scanner.nextInt();
        scanner.nextLine(); // مصرف newline

        switch (choice) {
            case 1:
                registerStudent();
                break;
            case 2:
                login();
                break;
            case 3:
                searchBooksGuest();
                break;
            case 4:
                showStatistics();
                break;
            case 5:
                System.exit(0);
                break;
            default:
                System.out.println("انتخاب نامعتبر!");
        }
    }

    private static void registerStudent() {
        System.out.print("نام کاربری: ");
        String username = scanner.nextLine();
        System.out.print("رمز عبور: ");
        String password = scanner.nextLine();

        if (userManager.registerStudent(username, password)) {
            System.out.println("ثبت‌نام با موفقیت انجام شد.");
        } else {
            System.out.println("خطا در ثبت‌نام. نام کاربری ممکن است تکراری باشد.");
        }
    }

    private static void login() {
        System.out.print("نام کاربری: ");
        String username = scanner.nextLine();
        System.out.print("رمز عبور: ");
        String password = scanner.nextLine();

        currentUser = userManager.login(username, password);
        if (currentUser != null) {
            System.out.println("خوش آمدید " + currentUser.getUsername() + "!");
        } else {
            System.out.println("نام کاربری یا رمز عبور اشتباه است.");
        }
    }

    private static void searchBooksGuest() {
        System.out.print("عنوان کتاب: ");
        String title = scanner.nextLine();

        List<Book> results = bookManager.searchByTitle(title);
        if (results.isEmpty()) {
            System.out.println("کتابی یافت نشد.");
        } else {
            System.out.println("نتایج جستجو:");
            for (Book book : results) {
                System.out.println(book.getBasicInfo());
            }
        }
    }

    private static void showStatistics() {
        System.out.println("\n=== آمار کلی کتابخانه ===");
        System.out.println("تعداد دانشجویان: " + userManager.getStudentCount());
        System.out.println("تعداد کل کتاب‌ها: " + bookManager.getTotalBooks());
        System.out.println("تعداد کل امانت‌ها: " + borrowManager.getTotalBorrows());
        System.out.println("کتاب‌های در حال امانت: " + borrowManager.getActiveBorrowsCount());
    }

    private static void showStudentMenu() {
        System.out.println("\n=== پنل دانشجو ===");
        System.out.println("1. جستجوی کتاب");
        System.out.println("2. درخواست امانت کتاب");
        System.out.println("3. مشاهده تاریخچه امانت‌ها");
        System.out.println("4. خروج از سیستم");
        System.out.print("انتخاب کنید: ");

        int choice = scanner.nextInt();
        scanner.nextLine();

        switch (choice) {
            case 1:
                searchBooksStudent();
                break;
            case 2:
                requestBorrow();
                break;
            case 3:
                viewBorrowHistory();
                break;
            case 4:
                currentUser = null;
                break;
            default:
                System.out.println("انتخاب نامعتبر!");
        }
    }

    private static void searchBooksStudent() {
        System.out.print("عنوان کتاب: ");
        String title = scanner.nextLine();
        System.out.print("نام نویسنده: ");
        String author = scanner.nextLine();
        System.out.print("سال نشر: ");
        int year = scanner.nextInt();
        scanner.nextLine();

        List<Book> results = bookManager.searchBooks(title, author, "", year);
        if (results.isEmpty()) {
            System.out.println("کتابی یافت نشد.");
        } else {
            for (Book book : results) {
                System.out.println(book.getFullInfo() + " - وضعیت: " + 
                    (book.isAvailable() ? "موجود" : "امانت داده شده"));
            }
        }
    }

    private static void requestBorrow() {
        System.out.print("شناسه کتاب: ");
        String bookId = scanner.nextLine();
        
        if (!bookManager.isBookAvailable(bookId)) {
            System.out.println("کتاب موجود نیست یا شناسه کتاب نامعتبر است.");
            return;
        }
        
        System.out.print("تاریخ شروع (YYYY-MM-DD): ");
        String startDateStr = scanner.nextLine();
        System.out.print("تاریخ پایان (YYYY-MM-DD): ");
        String endDateStr = scanner.nextLine();

        try {
            LocalDate startDate = LocalDate.parse(startDateStr);
            LocalDate endDate = LocalDate.parse(endDateStr);

            if (borrowManager.requestBorrow(currentUser.getUsername(), bookId, startDate, endDate)) {
                System.out.println("درخواست امانت با موفقیت ثبت شد.");
            } else {
                System.out.println("خطا در ثبت درخواست امانت.");
            }
        } catch (Exception e) {
            System.out.println("فرت تاریخ نامعتبر است. از فرمت YYYY-MM-DD استفاده کنید.");
        }
    }

    private static void viewBorrowHistory() {
        List<BorrowRecord> history = borrowManager.getUserBorrowHistory(currentUser.getUsername());
        if (history.isEmpty()) {
            System.out.println("هیچ سابقه امانتی یافت نشد.");
        } else {
            for (BorrowRecord record : history) {
                System.out.println(record.getInfo());
            }
        }
    }

    private static void showEmployeeMenu() {
        System.out.println("\n=== پنل کارمند ===");
        System.out.println("1. تغییر رمز عبور");
        System.out.println("2. ثبت کتاب جدید");
        System.out.println("3. جستجو و ویرایش کتاب");
        System.out.println("4. بررسی درخواست‌های امانت");
        System.out.println("5. مشاهده تاریخچه امانت دانشجو");
        System.out.println("6. مدیریت وضعیت دانشجو");
        System.out.println("7. ثبت دریافت کتاب");
        System.out.println("8. خروج از سیستم");
        System.out.print("انتخاب کنید: ");

        int choice = scanner.nextInt();
        scanner.nextLine();

        switch (choice) {
            case 1:
                changePassword();
                break;
            case 2:
                addNewBook();
                break;
            case 3:
                searchAndEditBook();
                break;
            case 4:
                reviewBorrowRequests();
                break;
            case 5:
                viewStudentBorrowHistory();
                break;
            case 6:
                manageStudentStatus();
                break;
            case 7:
                registerBookReturn();
                break;
            case 8:
                currentUser = null;
                break;
            default:
                System.out.println("انتخاب نامعتبر!");
        }
    }

    private static void changePassword() {
        System.out.print("رمز عبور جدید: ");
        String newPassword = scanner.nextLine();
        userManager.changePassword(currentUser.getUsername(), newPassword);
        System.out.println("رمز عبور با موفقیت تغییر یافت.");
    }

    private static void addNewBook() {
        System.out.print("شناسه کتاب: ");
        String id = scanner.nextLine();
        System.out.print("عنوان: ");
        String title = scanner.nextLine();
        System.out.print("نویسنده: ");
        String author = scanner.nextLine();
        System.out.print("ناشر: ");
        String publisher = scanner.nextLine();
        System.out.print("سال نشر: ");
        int year = scanner.nextInt();
        scanner.nextLine();
        System.out.print("شابک: ");
        String isbn = scanner.nextLine();

        Book book = new Book(id, title, author, publisher, year, isbn);
        if (bookManager.addBook(book)) {
            userManager.recordBookAdded(currentUser.getUsername());
            System.out.println("کتاب با موفقیت ثبت شد.");
        } else {
            System.out.println("خطا در ثبت کتاب. شناسه کتاب ممکن است تکراری باشد.");
        }
    }

    // متد جدید: جستجو و ویرایش کتاب
    private static void searchAndEditBook() {
        System.out.print("عنوان کتاب برای جستجو: ");
        String title = scanner.nextLine();
        
        List<Book> results = bookManager.searchByTitle(title);
        if (results.isEmpty()) {
            System.out.println("کتابی یافت نشد.");
            return;
        }
        
        System.out.println("نتایج جستجو:");
        for (int i = 0; i < results.size(); i++) {
            System.out.println((i + 1) + ". " + results.get(i).getFullInfo());
        }
        
        System.out.print("شماره کتاب برای ویرایش (0 برای انصراف): ");
        int choice = scanner.nextInt();
        scanner.nextLine();
        
        if (choice == 0 || choice > results.size()) {
            return;
        }
        
        Book selectedBook = results.get(choice - 1);
        editBook(selectedBook);
    }

    // متد جدید: ویرایش کتاب
    private static void editBook(Book book) {
        System.out.println("ویرایش کتاب: " + book.getTitle());
        System.out.println("1. ویرایش عنوان");
        System.out.println("2. ویرایش نویسنده");
        System.out.println("3. ویرایش ناشر");
        System.out.println("4. ویرایش سال نشر");
        System.out.println("5. ویرایش وضعیت موجودیت");
        System.out.print("انتخاب کنید: ");
        
        int choice = scanner.nextInt();
        scanner.nextLine();
        
        switch (choice) {
            case 1:
                System.out.print("عنوان جدید: ");
                String newTitle = scanner.nextLine();
                book.setTitle(newTitle);
                break;
            case 2:
                System.out.print("نویسنده جدید: ");
                String newAuthor = scanner.nextLine();
                book.setAuthor(newAuthor);
                break;
            case 3:
                System.out.print("ناشر جدید: ");
                String newPublisher = scanner.nextLine();
                book.setPublisher(newPublisher);
                break;
            case 4:
                System.out.print("سال نشر جدید: ");
                int newYear = scanner.nextInt();
                scanner.nextLine();
                book.setPublicationYear(newYear);
                break;
            case 5:
                book.setAvailable(!book.isAvailable());
                System.out.println("وضعیت موجودیت تغییر یافت به: " + (book.isAvailable() ? "موجود" : "امانت داده شده"));
                break;
            default:
                System.out.println("انتخاب نامعتبر!");
                return;
        }
        
        System.out.println("اطلاعات کتاب با موفقیت به‌روزرسانی شد.");
    }

    // متد جدید: بررسی درخواست‌های امانت
    private static void reviewBorrowRequests() {
        List<BorrowRecord> pendingRequests = borrowManager.getPendingRequests();
        if (pendingRequests.isEmpty()) {
            System.out.println("هیچ درخواست امانت در حال انتظار وجود ندارد.");
            return;
        }
        
        System.out.println("درخواست‌های امانت در حال انتظار:");
        for (int i = 0; i < pendingRequests.size(); i++) {
            BorrowRecord record = pendingRequests.get(i);
            System.out.println((i + 1) + ". " + record.getInfo());
        }
        
        System.out.print("شماره درخواست برای تایید (0 برای انصراف): ");
        int choice = scanner.nextInt();
        scanner.nextLine();
        
        if (choice == 0 || choice > pendingRequests.size()) {
            return;
        }
        
        BorrowRecord selectedRequest = pendingRequests.get(choice - 1);
        if (borrowManager.approveBorrow(selectedRequest.getId(), currentUser.getUsername())) {
            userManager.recordBookBorrowed(currentUser.getUsername());
            System.out.println("درخواست امانت تایید شد.");
        } else {
            System.out.println("خطا در تایید درخواست امانت.");
        }
    }

    // متد جدید: مشاهده تاریخچه امانت دانشجو
    private static void viewStudentBorrowHistory() {
        System.out.print("نام کاربری دانشجو: ");
        String username = scanner.nextLine();
        
        List<BorrowRecord> history = borrowManager.getUserBorrowHistory(username);
        if (history.isEmpty()) {
            System.out.println("هیچ سابقه امانتی برای این دانشجو یافت نشد.");
        } else {
            System.out.println("تاریخچه امانت دانشجو " + username + ":");
            for (BorrowRecord record : history) {
                System.out.println(record.getInfo());
            }
            
            // نمایش آمار
            StudentBorrowStats stats = borrowManager.getStudentBorrowStats(username);
            System.out.println("\nآمار دانشجو:");
            System.out.println("تعداد کل امانت‌ها: " + stats.getTotalBorrows());
            System.out.println("تعداد کتاب‌های تحویل داده نشده: " + stats.getNotReturnedCount());
            System.out.println("تعداد امانت‌های با تاخیر: " + stats.getDelayedReturnsCount());
        }
    }

    // متد جدید: مدیریت وضعیت دانشجو
    private static void manageStudentStatus() {
        System.out.print("نام کاربری دانشجو: ");
        String username = scanner.nextLine();
        
        if (userManager.toggleStudentStatus(username)) {
            User student = userManager.login(username, ""); // فقط برای بررسی وضعیت
            if (student != null) {
                System.out.println("وضعیت دانشجو تغییر یافت به: " + (student.isActive() ? "فعال" : "غیرفعال"));
            }
        } else {
            System.out.println("خطا در تغییر وضعیت دانشجو. دانشجو یافت نشد.");
        }
    }

    // متد جدید: ثبت دریافت کتاب
    private static void registerBookReturn() {
        System.out.print("شناسه درخواست امانت: ");
        String borrowId = scanner.nextLine();
        
        if (borrowManager.returnBook(borrowId, LocalDate.now())) {
            userManager.recordBookReturned(currentUser.getUsername());
            System.out.println("دریافت کتاب با موفقیت ثبت شد.");
        } else {
            System.out.println("خطا در ثبت دریافت کتاب. شناسه درخواست نامعتبر است.");
        }
    }

    private static void showManagerMenu() {
        System.out.println("\n=== پنل مدیر ===");
        System.out.println("1. تعریف کارمند جدید");
        System.out.println("2. مشاهده عملکرد کارمندان");
        System.out.println("3. مشاهده آمار امانت‌ها");
        System.out.println("4. مشاهده آمار دانشجویان");
        System.out.println("5. خروج از سیستم");
        System.out.print("انتخاب کنید: ");

        int choice = scanner.nextInt();
        scanner.nextLine();

        switch (choice) {
            case 1:
                registerEmployee();
                break;
            case 2:
                viewEmployeePerformance();
                break;
            case 3:
                viewBorrowStatistics();
                break;
            case 4:
                viewStudentStatistics();
                break;
            case 5:
                currentUser = null;
                break;
            default:
                System.out.println("انتخاب نامعتبر!");
        }
    }

    private static void registerEmployee() {
        System.out.print("نام کاربری: ");
        String username = scanner.nextLine();
        System.out.print("رمز عبور: ");
        String password = scanner.nextLine();

        if (userManager.registerEmployee(username, password, UserRole.EMPLOYEE)) {
            System.out.println("کارمند با موفقیت ثبت شد.");
        } else {
            System.out.println("خطا در ثبت کارمند. نام کاربری ممکن است تکراری باشد.");
        }
    }

    // متد جدید: مشاهده عملکرد کارمندان
    private static void viewEmployeePerformance() {
        List<EmployeePerformance> performanceList = userManager.getEmployeePerformance();
        if (performanceList.isEmpty()) {
            System.out.println("هیچ کارمندی ثبت نشده است.");
            return;
        }
        
        System.out.println("عملکرد کارمندان:");
        for (EmployeePerformance perf : performanceList) {
            System.out.println("کارمند: " + perf.getUsername());
            System.out.println("  - کتاب‌های ثبت شده: " + perf.getBooksAdded());
            System.out.println("  - کتاب‌های امانت داده شده: " + perf.getBooksBorrowed());
            System.out.println("  - کتاب‌های تحویل گرفته شده: " + perf.getBooksReturned());
            System.out.println();
        }
    }

    // متد جدید: مشاهده آمار امانت‌ها
    private static void viewBorrowStatistics() {
        BorrowStatistics stats = borrowManager.getBorrowStatistics();
        System.out.println("\n=== آمار امانت‌ها ===");
        System.out.println("تعداد درخواست‌های امانت ثبت شده: " + stats.getTotalRequests());
        System.out.println("تعداد کل امانت‌های داده شده: " + stats.getTotalBorrowed());
        System.out.println("میانگین مدت امانت (روز): " + String.format("%.2f", stats.getAverageBorrowDays()));
    }

    // متد جدید: مشاهده آمار دانشجویان
    private static void viewStudentStatistics() {
        System.out.println("\n=== آمار دانشجویان ===");
        
        List<User> students = userManager.getAllStudents();
        System.out.println("تعداد کل دانشجویان: " + students.size());
        
        for (User student : students) {
            StudentBorrowStats stats = borrowManager.getStudentBorrowStats(student.getUsername());
            System.out.println("\nدانشجو: " + student.getUsername() + " (وضعیت: " + (student.isActive() ? "فعال" : "غیرفعال") + ")");
            System.out.println("  - تعداد کل امانت‌ها: " + stats.getTotalBorrows());
            System.out.println("  - کتاب‌های تحویل داده نشده: " + stats.getNotReturnedCount());
            System.out.println("  - امانت‌های با تاخیر: " + stats.getDelayedReturnsCount());
        }
        
        // نمایش 10 دانشجوی با بیشترین تاخیر
        System.out.println("\n=== 10 دانشجوی با بیشترین تاخیر در تحویل کتاب ===");
        List<Map.Entry<String, Long>> topDelayed = borrowManager.getTopStudentsWithDelays();
        if (topDelayed.isEmpty()) {
            System.out.println("هیچ دانشجویی با تاخیر وجود ندارد.");
        } else {
            for (int i = 0; i < topDelayed.size() && i < 10; i++) {
                Map.Entry<String, Long> entry = topDelayed.get(i);
                System.out.println((i + 1) + ". " + entry.getKey() + " - " + entry.getValue() + " روز تاخیر");
            }
        }
    }
}

تغییرات لازم در سایر کلاس‌ها

همچنین مطمئن شوید که متد searchByTitle در کلاس BookManager وجود دارد:
java

public class BookManager {
    // ... سایر متدها ...
    
    public List<Book> searchByTitle(String title) {
        return books.values().stream()
                .filter(book -> book.getTitle().toLowerCase().contains(title.toLowerCase()))
                .collect(Collectors.toList());
    }
}

حالا تمام متدهای مورد نیاز پیاده‌سازی شده‌اند و ارور Cannot resolve method 'searchAndEditBook' برطرف خواهد شد.
